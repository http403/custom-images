name: Build container
on:
  push:
    branches:
      - main
    paths:
      - 'containers/**'
  issues:
    types: 
      - opened
      - labeled
  pull_request:
    types:
      - opened
      - edited
      - labeled
      - ready_for_review
      - review_requested
      - synchronize
    paths:
      - 'containers/**'

env:
  REGISTRY: ghcr.io

jobs:
  build:
    # Supposingly there should only one build at a time
    name: Build the container
    permissions:
      contents: read
      issues: write
      metadata: read
      packages: write
      pull-requests: read
    if: | 
      (
        contains(github.event.issue.labels.*.name, 'ci-build') &&
        !contains(github.event.issue.labels.*.name, 'ci-failed')
      ) 
      ||
      (
        github.event_name == 'pull_request' &&
        contains(github.event.pull_request.labels.*.name, 'new-container')
      )
    runs-on: ubuntu-latest
    env:
      GITHUB_EVENT: ${{ toJSON(github.event) }}
    steps:
      - uses: actions/checkout@v4
      - run: |
          # Datecode for tag
          echo "DATE_CODE=$(date +%Y%m%d)" >> "$GITHUB_ENV"

          # Discovery
          if [ "$GITHUB_EVENT" = pull_request ]; then
            # Pull Request
            git fetch origin "$GITHUB_BASE_REF" --depth=1
            NEW=$(git diff --name-only origin/"$GITHUB_BASE_REF" "$GITHUB_SHA" -- containers | grep -E 'containers/.*/' | cut -d/ -f2 | uniq)
            echo "CONTAINER=$(echo "$NEW")" >> "$GITHUB_ENV"
          elif [ "$GITHUB_EVENT" = issue ]; then
            # Issues by check-updates.yml
            CONTAINER=$(echo "$GITHUB_EVENT" | jq '.issue.lables[].name | select(startswith("container"))' | sed 's/\"//g' | cut -d/ -f2 | uniq)
            echo "CONTAINER=$(echo "$CONTAINER")" >> "$GITHUB_ENV"
          elif [ "$GITHUB_EVENT" = push ]; then
            # Push after PR
            git fetch origin ${{ github.event.before }} --depth=1
            NEW=$(git diff --name-only origin/"$GITHUB_BASE_REF" "$GITHUB_SHA" -- containers | grep -E 'containers/.*/' | cut -d/ -f2 | uniq)
            echo "CONTAINER=$(echo "$NEW")" >> "$GITHUB_ENV"
          else
            echo "Something went wrong. Event triggered not for this workflow. Abort"
            exit 1
          fi
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.CONTAINER }}
          tags: |
            type=raw,vaule=${{ env.DATE_CODE }}
      - uses: docker/build-push-action@v5
        with:
          context: container/${{ env.CONTAINER }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
        continue-on-error: true
      - if: github.event_name == 'issue' && failure()
        uses: andymckay/labeler@v1
        with:
          add-labels: "ci-failed"
          remove-labels: "ci-build"
