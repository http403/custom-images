name: Build container
on:
  push:
    branches:
      - main
    paths:
      - 'containers/**'
  pull_request:
    paths:
      - 'containers/**'

env:
  REGISTRY: ghcr.io

jobs:
  list-containers:
    name: List the changed container definitions
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.changes.outputs.matrix }}

    steps:
      - name: Checkout the repo
        uses: actions/checkout@v4

      - name: Search for changes
        id: changes
        run: |
          case "$GITHUB_EVNET" in
            "pull_request")
              git fetch origin "$GITHUB_BASE_REF" --depth=1
              CHANGED=$(git diff --name-only origin/"$GITHUB_BASE_REF" "$GITHUB_SHA" -- containers | grep -E 'containers/.*/' | cut -d/ -f2 | uniq)
              ;;
            "push")
              git fetch origin ${{ github.event.before }} --depth=1
              CHANGED=$(git diff --name-only ${{ github.event.before }} ${{ github.event.after }} -- containers | grep -E 'containers/.*/' | cut -d/ -f2 | uniq)
              ;;
            *)
              echo "::error::Something not right. Abort."
              exit 1
              ;;

          # Convert $CHANGED to a JSON array
          echo "matrix=$(echo "$CHANGED" | jq -R -s -c 'split("\n")[:-1]')" >> "$GITHUB_OUTPUT"


  build-deploy:
    name: build-deploy ${{ matrix.container }}
    needs: list-containers
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        container: ${{ fromJSON(needs.list-containers.outputs.matrix) }}
    permissions:
      contents: read
      packages: write
      pull-requests: write
    steps:
      - name: Checkout the repo
        uses: actions/chechout@v2

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pipenv'

      - name: Install pipenv
        run: curl https://raw.githubusercontent.com/pypa/pipenv/master/get-pipenv.py | python

      - name: Install dependencies
        run: pipenv install

      - name: Run build script
        run: pipenv run python containers/${{ matrix.container }}/build.py
        
      - name: Run deploy script
        if: github.event_name == 'push'
        run: pipenv run python containers/${{ matrix.container }}/deploy.py
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # build:
  #   # Supposingly there should only one build at a time
  #   name: Build the container
  #   permissions:
  #     contents: read
  #     issues: write
  #     packages: write
  #     pull-requests: read
  #   if: | 
  #     (
  #       contains(github.event.issue.labels.*.name, 'autoupdate/request') &&
  #       !contains(github.event.issue.labels.*.name, 'autoupdate/failed')
  #     ) 
  #     ||
  #     (
  #       github.event_name == 'pull_request' &&
  #       contains(github.event.pull_request.labels.*.name, 'new-container')
  #     )
  #   runs-on: ubuntu-latest
  #   env:
  #     GITHUB_EVENT: ${{ toJSON(github.event) }}
  #   steps:
  #     - uses: actions/checkout@v4
  #     - run: |
  #         # Datecode for tag
  #         echo "DATE_CODE=$(date +%Y%m%d)" >> "$GITHUB_ENV"

  #         # Discovery
  #         if [ "$GITHUB_EVENT" = pull_request ]; then
  #           # Pull Request
  #           git fetch origin "$GITHUB_BASE_REF" --depth=1
  #           NEW=$(git diff --name-only origin/"$GITHUB_BASE_REF" "$GITHUB_SHA" -- containers | grep -E 'containers/.*/' | cut -d/ -f2 | uniq)
  #           echo "CONTAINER=$(echo "$NEW")" >> "$GITHUB_ENV"
  #         elif [ "$GITHUB_EVENT" = issue ]; then
  #           # Issues by check-updates.yml
  #           CONTAINER=$(echo "$GITHUB_EVENT" | jq '.issue.lables[].name | select(startswith("container"))' | sed 's/\"//g' | cut -d/ -f2 | uniq)
  #           echo "CONTAINER=$(echo "$CONTAINER")" >> "$GITHUB_ENV"
  #         elif [ "$GITHUB_EVENT" = push ]; then
  #           # Push after PR
  #           git fetch origin ${{ github.event.before }} --depth=1
  #           NEW=$(git diff --name-only origin/"$GITHUB_BASE_REF" "$GITHUB_SHA" -- containers | grep -E 'containers/.*/' | cut -d/ -f2 | uniq)
  #           echo "CONTAINER=$(echo "$NEW")" >> "$GITHUB_ENV"
  #         else
  #           echo "Something went wrong. Event triggered not for this workflow. Abort. (event="$GITHUB_EVENT")"
  #           exit 1
  #         fi
  #     - uses: docker/setup-qemu-action@v3
  #     - uses: docker/setup-buildx-action@v3
  #     - uses: docker/login-action@v3
  #       with:
  #         registry: ${{ env.REGISTRY }}
  #         username: ${{ github.repository_owner }}
  #         password: ${{ secrets.GITHUB_TOKEN }}
  #     - id: meta
  #       uses: docker/metadata-action@v5
  #       with:
  #         images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.CONTAINER }}
  #         tags: |
  #           type=raw,vaule=${{ env.DATE_CODE }}
  #     - id: build
  #       uses: docker/build-push-action@v5
  #       with:
  #         context: container/${{ env.CONTAINER }}
  #         push: ${{ github.event_name != 'pull_request' }}
  #         tags: ${{ steps.meta.outputs.tags }}
  #         labels: ${{ steps.meta.outputs.labels }}
  #       continue-on-error: true
  #     - name: Build failed
  #       if: github.event_name == 'issue' && steps.build.outcome == 'failure'
  #       run: |
  #         gh issue edit ${{ github.event.issue.id }} --add-label "autoupdate/failed" --remove-label "autoupdate/request"
  #         gh issue comment ${{ github.event.issue.id }} -b "Build failed. See ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
  #       env:
  #         GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     - name: Sucessful build. Closing the issue and update labels
  #       if: github.event_name == 'issue' && steps.build.outcome == 'success'
  #       run: |
  #         gh issue edit ${{ github.event.issue.id }} --add-label "autoupdate/success" --remove-label "autoupdate/request"
  #         gh issue close ${{ github.event.issue.id }} --comment "Successful build. Closing." -r "completed"
  #       env:
  #         GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

